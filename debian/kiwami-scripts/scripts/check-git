#!/usr/bin/env bash
#
# Checks all git repositories in ~/dev (or $1) and prints outstanding git
# statuses.

DEFAULT_DIR=$HOME/dev

print_usage() {
	echo "USAGE:"
	echo "    check-git       -- check repositories in $DEFAULT_DIR"
	echo "    check-git [DIR] -- check repositories in [DIR]"
	exit 1
}

# prints $1 in fancy colour
fancy_print() {
	tput setaf 5 && tput bold
	echo $1
	tput sgr 0
}

# get argument for target directory if present
case "$#" in
	0) # default directory
		TGT_DIR=$DEFAULT_DIR
		;;
	1) # given directory
		if [ -d "$1" ]; then
			TGT_DIR="$1"
		else
			print_usage
		fi
		;;
	*) # too many arguments
		print_usage
		;;
esac

# iterate through subdirectories of TGT_DIR
for dir in $(find "$TGT_DIR" -mindepth 1 -maxdepth 1 -type d); do
	# skip non git repos
	[ -d "$dir/.git" ] || continue

	# whether we should print the status
	print_status=0

	# get git status sans errors
	git_status=$(git -C "$dir" status 2> /dev/null)

	# skip if status errored
	if [ $? -ne 0 ]; then
		fancy_print "$dir"
		echo "Git status errored: skipping"
		continue
	fi

	# check for unstaged
	echo $git_status | grep "nothing to commit" > /dev/null
	if [ $? -ne 0 ]; then
		print_status=$((print_status + 1))
	fi

	# check for staged
	echo $git_status | grep "to be committed" > /dev/null
	if [ $? -eq 0 ]; then
		print_status=$((print_status + 1))
	fi

	# check for committed but ahead
	echo $git_status | grep "ahead of" > /dev/null
	if [ $? -eq 0 ]; then
		print_status=$((print_status + 1))
	fi

	# print status if necessary
	if [ "$print_status" -gt 0 ]; then
		fancy_print "$dir"
		git -C "$dir" status

		# set that we have some repos out of date
		out_of_date="yes"
	fi
done

# if no repos are out of date, print happy message
if [ -z $out_of_date ]; then
	echo "All repos in $TGT_DIR committed and pushed"
fi
